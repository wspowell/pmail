// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	resources "github.com/wspowell/snailmail/resources"
)

// MailStore is an autogenerated mock type for the MailStore type
type MailStore struct {
	mock.Mock
}

// CollectMail provides a mock function with given fields: ctx, mailboxId
func (_m *MailStore) CollectMail(ctx context.Context, mailboxId uint32) ([]uint32, error) {
	ret := _m.Called(ctx, mailboxId)

	var r0 []uint32
	if rf, ok := ret.Get(0).(func(context.Context, uint32) []uint32); ok {
		r0 = rf(ctx, mailboxId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint32)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, mailboxId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMail provides a mock function with given fields: ctx, mail
func (_m *MailStore) CreateMail(ctx context.Context, mail resources.Mail) (uint32, error) {
	ret := _m.Called(ctx, mail)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(context.Context, resources.Mail) uint32); ok {
		r0 = rf(ctx, mail)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, resources.Mail) error); ok {
		r1 = rf(ctx, mail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DepositMail provides a mock function with given fields: ctx, mailId, mailboxId
func (_m *MailStore) DepositMail(ctx context.Context, mailId uint32, mailboxId uint32) error {
	ret := _m.Called(ctx, mailId, mailboxId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) error); ok {
		r0 = rf(ctx, mailId, mailboxId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadMail provides a mock function with given fields: ctx, mailId
func (_m *MailStore) ReadMail(ctx context.Context, mailId uint32) (*resources.Mail, error) {
	ret := _m.Called(ctx, mailId)

	var r0 *resources.Mail
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *resources.Mail); ok {
		r0 = rf(ctx, mailId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.Mail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, mailId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrackMail provides a mock function with given fields: ctx, mailId
func (_m *MailStore) TrackMail(ctx context.Context, mailId uint32) error {
	ret := _m.Called(ctx, mailId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(ctx, mailId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

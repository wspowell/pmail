// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MailboxStore is an autogenerated mock type for the MailboxStore type
type MailboxStore struct {
	mock.Mock
}

// CreateMailbox provides a mock function with given fields: ctx, userId, attributes
func (_m *MailboxStore) CreateMailbox(ctx context.Context, userId uint32, attributes resources.MailboxAttributes) (uint32, error) {
	ret := _m.Called(ctx, userId, attributes)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(context.Context, uint32, resources.MailboxAttributes) uint32); ok {
		r0 = rf(ctx, userId, attributes)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32, resources.MailboxAttributes) error); ok {
		r1 = rf(ctx, userId, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNearbyMailboxes provides a mock function with given fields: ctx, location, radius
func (_m *MailboxStore) FindNearbyMailboxes(ctx context.Context, location resources.GeoCoordinate, radius float32) error {
	ret := _m.Called(ctx, location, radius)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, resources.GeoCoordinate, float32) error); ok {
		r0 = rf(ctx, location, radius)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMailboxById provides a mock function with given fields: ctx, mailboxId
func (_m *MailboxStore) GetMailboxById(ctx context.Context, mailboxId uint32) (*resources.Mailbox, error) {
	ret := _m.Called(ctx, mailboxId)

	var r0 *resources.Mailbox
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *resources.Mailbox); ok {
		r0 = rf(ctx, mailboxId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.Mailbox)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, mailboxId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMailboxByUserId provides a mock function with given fields: ctx, userId
func (_m *MailboxStore) GetMailboxByUserId(ctx context.Context, userId uint32) (*resources.Mailbox, error) {
	ret := _m.Called(ctx, userId)

	var r0 *resources.Mailbox
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *resources.Mailbox); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.Mailbox)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
